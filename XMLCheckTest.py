"""XMLCheckTest"""import unittestimport XMLCheck3 as XCclass DefaultsTestCase(unittest.TestCase):    """These test if the defaults are created properly"""    def setUp(self):        self.t = XC.XMLChecker('name')    def tearDown(self):        del self.t    def test_default_unique(self):        """XMLChecker.unique should default to False"""        self.failIf(self.t.unique)    def test_default_required(self):        """XMLChecker.required should default to True"""        self.failUnless(self.t.required)    def test_default_main(self):        """XMLChecker.main should default to False"""        self.failIf(self.t.main)    def test_default_minOccurs(self):        """XMLChecker.minOccurs should default to 1"""        self.assertEqual(self.t.minOccurs,1)    def test_default_maxOccurs(self):        """XMLChecker.maxOccurs should default to 1"""        self.assertEqual(self.t.maxOccurs,1)    def test_default_expected_children(self):        """XMLChecker.expected_children should be an empty list"""        self.assertEqual(self.t.expected_children,[])    def test_default_expected_attributes(self):        """XMLChecker.expected_attributes should be an empty dictionary"""        self.assertEqual(self.t.expected_attributes,{})    def test_raises_expected_exception(self):        """XMLChecker should raise an XMLCheckError"""        self.assertRaises(XC.XMLCheckError,self.t,None)class CustomizedTestCase(unittest.TestCase):    def setUp(self):        self.t = XC.XMLChecker('thisisme',unique=True,main=True,required=False,                minOccurs = 0, maxOccurs = 1)    def tearDown(self):        del self.t        def test_custom_name(self):        """XMLChecker.name should be kept"""        self.assertEqual(self.t.name,'thisisme')        def test_custom_main(self):        """XMLChecker.main should be set to True when applicable"""        self.failUnless(self.t.name)        def test_custom_required(self):        """XMLChecker.required should be set to False when applicable"""        self.failIf(self.t.required)        def test_custom_unique(self):        """XMLChecker.unique should be set to True when applicable"""        self.failUnless(self.t.unique)        def test_custom_minOccurs(self):        """XMLChecker.minOccurs should customize"""        self.assertEqual(self.t.minOccurs,0)        def test_customize_maxOccurs(self):        """XMLChecker.maxOccurs should customize"""        self.assertEqual(self.t.maxOccurs, 1)class BadOptionsTestCase(unittest.TestCase):    def test_main_failure(self):        """XMLChecker.main should fail if not boolean"""        self.assertRaises(XC.XMLCheckError,XC.XMLChecker,'t',main=45)        def test_unique_failure(self):        """XMLChecker.unique should fail if not boolean"""        self.assertRaises(XC.XMLCheckError,XC.XMLChecker,'t',unique="youbet")        def test_required_failure(self):        """XMLChecker.required should fail if not boolean"""        self.assertRaises(XC.XMLCheckError,XC.XMLChecker,'t',unique=None)        def test_minOccurs(self):        """XMLChecker.minOccurs should fail if not integer"""        self.assertRaises(XC.XMLCheckError,XC.XMLChecker,'t',minOccurs = 1.2)        def test_maxOccurs(self):        """XMLCHecker.maxOccurs should fail if not integer or InfinityPlus"""        self.assertRaises(XC.XMLCheckError,XC.XMLChecker,'t',maxOccurs = "1")    class TextCheckerTestCase(unittest.TestCase):    def setUp(self):        self.t=XC.TextChecker('t',minlen = 4, maxlen = 6)            def test_datatooshort(self):        """TextChecker should fail if data too short"""        self.assertRaises(XC.XMLCheckError,self.t,'s')            def test_datatoolong(self):        """TextChecker should fail if data too long"""        self.assertRaises(XC.XMLCheckError,self.t,'1234567')
                class DateCheckerTestCase(unittest.TestCase):        def setUp(self):                self.t=XC.DateChecker('t')        def tearDown(self):                del self.t        def testbaddate(self):                """DateChecker should fail if date format doesn't match"""                self.assertRaises(XC.XMLCheckError,self.t,"Dek 21, 1970")        def testgooddate(self):                """DateChecker should accept standard American dates"""                self.t("Jan 1, 2008")        def testcustomformat(self):                """DateChecker should accept format and date"""                c = XC.DateChecker('iso',format="%Y%m%d")                c("20080101")        def testbadcustomformat(self):                """DateChecker should not allow standard and custom dates mixed"""                c = XC.DateChecker('iso',format="%Y%m%d")                self.assertRaises(XC.XMLCheckError,c,"Jan 1, 2008")        def testtimeonly(self):            """DateChecker should allow time data with proper format"""            c = XC.DateChecker('test', format="%H:%M")            c("11:23")

class IntegerCheckerTestCase(unittest.TestCase):
    def setUp(self):
        self.t = XC.IntegerChecker('t', min=-3, max=3)
    def tearDown(self):
        del self.t
    
    def testtoolow(self):
        """IntegerChecker should fail if number is too low"""
        self.assertRaises(XC.XMLCheckError, self.t, '-4')
    
    def testtoohig(self):
        """IntegerChecker sholud fail in number is too high"""
        self.assertRaises(XC.XMLCheckError, self.t, '4')
    
    def testbadinput(self):
        """IntegerChecker should fail if number is not an integer"""
        self.assertRaises(XC.XMLCheckError, self.t, '1.4')
    
    def testbadinputblank(self):
        """IntegerChecker should fail if given blank"""
        self.assertRaises(XC.XMLCheckError, self.t, '')
    
    def testbadinputstring(self):
        self.assertRaises(XC.XMLCheckError, self.t, 'not a number')class ValidatorTestCase(unittest.TestCase):        def setUp(self):                self.val = XC.Validator('testValidator')                self.nameCheck = XC.TextChecker('name',                                                minlen=1,                                                required=True)                self.val.register(self.nameCheck)                self.emailCheck = XC.TextChecker('email',                                                 pattern = "[a-zA-Z]+@[a-zA-Z]+\.[a-zA-Z]",                                                 maxOccurs = 5,                                                 minOccurs=0)                self.val.register(self.emailCheck)                self.cardCheck = XC.SequenceChecker('card',                                                    expected_children = ['name','email'],                                                    main = True,)                self.val.register(self.cardCheck)        def tearDown(self):                del self.val                del self.nameCheck                del self.emailCheck                del self.cardCheck                        def testMain(self):                "Validator.main() should return the main check object"                self.assertEquals(self.val.main(),self.cardCheck)        def testCases(self):                "Validator should accept proper input"                base = "<card><name>a</name>%s</card>"                email = "<email>a@b.com</email>"                self.val.run(base % "")                self.val.run(base % email)                self.val.run(base % str(email*2))                self.val.run(base % str(email*3))                self.val.run(base % str(email*4))                self.val.run(base % str(email*5))        def testBadInput(self):                "Validator should pass checker errors"                self.assertRaises(XC.XMLCheckError,self.val.run,"<card />")                self.assertRaises(XC.XMLCheckError,self.val.run,"<card><name /></card>")                self.assertRaises(XC.XMLCheckError,self.val.run,"<card><name></name>")                self.assertRaises(XC.XMLCheckError,self.val.run,"<card><name>a</name>%s</card>" % str("<email/>"))class ListCheckerTestCase(unittest.TestCase):    def setUp(self):        self.inCheck = XC.TextChecker('name', unique=True)        self.outCheck = XC.ListChecker('list', itemCheck = self.inCheck)        self.listCheck = XC.ListChecker('list', values=['a','b'] )        def tearDown(self):        del self.inCheck        del self.outCheck        del self.listCheck        def testListWithInCheckAndValues(self):        """ListChecker sholud raise an error if there are values and an itemCheck"""        self.assertRaises(XC.XMLCheckError, XC.ListChecker, 'name', values=['a','b'], itemCheck = self.inCheck)        def testListWithInCheck(self):        self.assertRaises(XC.XMLCheckError, self.outCheck, 'a, a')        if __name__=='__main__':    import test.test_support        test.test_support.verbose = True    test.test_support.run_unittest(        DefaultsTestCase,CustomizedTestCase,BadOptionsTestCase,        TextCheckerTestCase,DateCheckerTestCase,        ValidatorTestCase, IntegerCheckerTestCase,        ListCheckerTestCase        )    